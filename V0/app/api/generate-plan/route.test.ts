
import { describe, it, expect, vi, beforeEach } from 'vitest';
import { POST } from './route';
import { NextRequest } from 'next/server';
import { generateObject } from 'ai';

// Mock the 'ai' module
vi.mock('ai', () => ({
  generateObject: vi.fn(),
}));

// Mock the NextRequest object
const mockRequest = (body: any): NextRequest => {
  const req = {
    json: async () => body,
    headers: new Headers({ 'Content-Type': 'application/json' }),
  } as NextRequest;
  return req;
};

describe('POST /api/generate-plan', () => {
  const originalApiKey = process.env.OPENAI_API_KEY;

  beforeEach(() => {
    // Reset mocks before each test
    vi.resetAllMocks();
    // Restore original API key from process.env
    process.env.OPENAI_API_KEY = originalApiKey;
  });

  it('should return a 422 error with fallbackRequired if OPENAI_API_KEY is missing', async () => {
    // Arrange
    delete process.env.OPENAI_API_KEY; // Simulate missing API key

    const requestBody = {
      user: {
        experience: 'beginner',
        goal: 'habit',
        daysPerWeek: 3,
        preferredTimes: ['morning'],
      },
      rookie_challenge: true,
    };
    const req = mockRequest(requestBody);

    // Act
    const response = await POST(req);
    const data = await response.json();

    // Assert
    expect(response.status).toBe(422);
    expect(data.fallbackRequired).toBe(true);
    expect(data.error).toContain('OpenAI API key is not configured or is invalid');
    expect(generateObject).not.toHaveBeenCalled();
  });

  it('should return a 422 error if OPENAI_API_KEY is invalid', async () => {
    // Arrange
    process.env.OPENAI_API_KEY = 'invalid-key'; // Simulate invalid API key

    const requestBody = {
      user: {
        experience: 'beginner',
        goal: 'habit',
        daysPerWeek: 3,
        preferredTimes: ['morning'],
      },
      rookie_challenge: true,
    };
    const req = mockRequest(requestBody);

    // Act
    const response = await POST(req);
    const data = await response.json();

    // Assert
    expect(response.status).toBe(422);
    expect(data.fallbackRequired).toBe(true);
    expect(data.error).toContain('OpenAI API key is not configured or is invalid');
    expect(generateObject).not.toHaveBeenCalled();
  });

  it('should call generateObject with the correct prompt if API key is valid', async () => {
    // Arrange
    process.env.OPENAI_API_KEY = 'sk-valid-key'; // Simulate valid API key
    const mockGeneratedPlan = {
      title: 'Test Plan',
      description: 'A plan generated by AI',
      totalWeeks: 4,
      workouts: [],
    };
    (generateObject as vi.Mock).mockResolvedValue({ object: mockGeneratedPlan });

    const requestBody = {
      user: {
        experience: 'beginner',
        goal: 'habit',
        daysPerWeek: 3,
        preferredTimes: ['morning'],
      },
      rookie_challenge: true,
    };
    const req = mockRequest(requestBody);

    // Act
    const response = await POST(req);
    const data = await response.json();

    // Assert
    expect(response.status).toBe(200);
    expect(data.plan).toEqual(mockGeneratedPlan);
    expect(data.source).toBe('ai');
    expect(generateObject).toHaveBeenCalledOnce();
  });
});
